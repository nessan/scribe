## A Small Optimisation

A comment on Reddit suggested that the `indent_string` function could be optimised by storing the individual indented lines in a table and combining them using table concatenation at the end of the method.

The original version builds up the indented string bit by bit on the fly:
```lua
local function indent_string_orig(str, indent, ignore_first_line)
    ignore_first_line = ignore_first_line or false
    if not indent or indent == "" or not str or str == "" then return str end
    local ends_with_newline = str:sub(-1) == "\n"

    local indented_str = ""
    local first_line = true
    for line in str:gmatch("([^\n]*)\n?") do
        if not first_line then indented_str = indented_str .. '\n' end
        local tab = first_line and ignore_first_line and '' or indent
        indented_str = indented_str .. tab .. line                              -- <1>
        first_line = false
    end
    if ends_with_newline then indented_str = indented_str .. "\n" end
    return indented_str
end
```
1. We keep appending to `indented_str` which eventually gets returned at the end of the function.

Here is an alternate version that stores the individiual indented lines in a table and only joins them together at the end of the method:
```lua
local function indent_string(str, indent, ignore_first_line)
    ignore_first_line = ignore_first_line or false
    if not indent or indent == "" or not str or str == "" then return str end
    local ends_with_newline = str:sub(-1) == "\n"

    local lines = {}                                                            -- <1>
    local first_line = true
    for line in str:gmatch("[^\r\n]+") do
        local tab = first_line and ignore_first_line and '' or indent
        table.insert(lines, tab .. line)                                        -- <2>
        first_line = false
    end
    local retval = table.concat(lines, "\n")                                    -- <3>
    if ends_with_newline then retval = retval .. "\n" end                       -- <4>
    return retval
end
```
1. `lines` is a table used to store the individual indented lines from `str`.
2. We iterate through the lines in `str` and insert indented versions into that table.
3. We join all the lines together using Lua's standard `table.concat` method.
4. If the input string ended with a newline character then so should the output string.

Here is a simple function to benchmark the two versions:
```lua
local function benchmark_indents()
    local test_str = string.rep('line\n', 10000) -- <1>
    local iterations = 100                       -- <2>

    -- Benchmark the `indent_string_orig` method:
    print('Benchmarking `indent_string_orig` ...')
    local start_time = os.clock()
    for i = 1, iterations do
        indent_string_orig(test_str, '    ')
    end
    local t1 = os.clock() - start_time

    -- Benchmark the `indent_string` method:
    print('Benchmarking `indent_string` ...')
    start_time = os.clock()
    for i = 1, iterations do
        indent_string(test_str, '    ')
    end
    local t2 = os.clock() - start_time

    -- Print and compare the results:
    print(string.format("indent_string_orig took: %.4f seconds", t1))
    print(string.format("indent_string took:      %.4f seconds", t2))
    print(string.format("indent_string is %.2fx %s than indent_string_orig",
                        math.abs(t1 / t2), t2 < t1 and "faster" or "slower"))
end
```
1. Create a largish test string with lots of lines to indent.
2. We run enough iterations of the two methods to consume a decent interval of time. <br> That way we're sure that any loop overhead is not an important factor in the comparison.

On my machine, the optimised version is faster by a factor of 10 or more.
The test is quite rough and ready but clearly the table version is worth moving to!
