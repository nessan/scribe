## Lua Types

Like every other programming language ever invented, the classic first Lua script is:
```lua
str = "Hello World"
print(str)
```
And, hey presto, it works!
On your terminal, the output is:
```sh
Hello World
```

That handy `print` function works as you'd expect for many Lua types.

NOTE: Lua always aims for the minimal and has only eight types in *total*. <br>
Compare that to Rust, which has twelve types just for integers!

By the way, Lua's `tostring` function is a companion to `print` and converts any Lua type to a string.

### Simple Types

The four most straightforward Lua types are `number`, `boolean`, `string` and `nil`:
```lua
str = "Cinderella"    -- <1>
answer = 42           -- <2>
pi = 3.14             -- <3>
flag = false           -- <4>
oops = nil            -- <5>
print(str, answer, pi, flag, oops)
```
1. A `string`.
2. A `number` that is an integer.
3. This `number` is a float, but Lua uses one type for integers and floats.
4. A `boolean`.
5. A special `nil` type indicates not-founds, fails, etc.

In each case, you get very reasonable results on your screen:
```sh
Cinderella	42 3.14 false nil
```
We can use `print` to dump recognisable values from `number`, `boolean`, `string` and even `nil`.

The simplest form of debugging is to sprinkle print statements throughout your code liberally, so the more types `print` works on, the better.
Sure, it's not elegant, but every programmer uses print statements when things go awry.
Even more so in a non-compiled, dynamic language like Lua, where adding a print statement and rerunning happens as fast as you can type.

Lua has four additional types beyond `number`, `string`, `boolean`, and `nil`.<br>
These are `function`, `userdata`, `thread` and `table`.

### Lua Functions

Lua methods you write or import all have the type `function`. <br>
Let's look at a simple function example:
```lua
function answer() return 42 end
print(answer())                     -- <1>
print(answer)                       -- <2>
```
1. This prints whatever is *returned* from our `answer` function.
2. This prints what Lua thinks of as the function itself.

Output:
```sh
42
function: 0x600003e6cca0            # <1>
```
1. The part after the colon will vary from run to run.

The string `"function"` is descriptive enough, but the string `0x...` that follows the colon is opaque.
It is the *address* in memory where Lua stores its form of the function in question.
That is consistent for a single run, so if you print the function twice:
```lua
function answer() return 42 end
print(answer)
print(answer)
```
The code outputs the exact string twice, e.g.
```sh
function: 0x6000032a8ca0
function: 0x6000032a8ca0
```
However, the next time you run the program, you'll get something else, such as
```sh
function: 0x600002650ca0
function: 0x600002650ca0
```

We don't usually write things like `print(answer)` in our code except by accident!
When we do, it's likely a bug.
We probably *meant* to write `print(answer())` with those parentheses `()` that tells Lua to please execute the `answer` function and capture the result,
So, while the output from `print(answer)` is opaque, it's generally followed by an "oops, I forgot some parentheses!"

### Two Opaque Types

One of Lua's great strengths is its ability to interface with things written in other languages.
Lua's `userdata` type is commonly associated with this ability.

When you try to print something implemented in another language, it is hardly surprising that Lua can only say, "I see that as a piece of user data located at this address in memory."

You can't expect much more; if you need something more descriptive, you'd expect to perform that action in another language.

Lua also has a `thread` type, which is used to implement coroutines.
Again this is an opaque type, so `print` will only say, "I see that as a thread ..." and give you a memory address.

### Array Tables

Finally, we come to the all-important `table` type, starting with Lua arrays, a subset of this type.

The `table` type is Lua's *only* "complex" *native* data type and is amazingly versatile.
Once you use Lua for anything beyond trivial scripts, you will inevitably build and interpret many tables.

Tables can contain all Lua types, including Lua functions and other tables, which can refer to each other in cycles, etc.

But let's start with a simple array example:
```lua
gents = {'Tom', 'Dick', 'Harry'}
print(gents)
```
The corresponding output will be something like:
```sh
table: 0x600001d32980
```
This output is similar in spirit to what we got by calling `print` on that Lua function shown above.
Lua recognises the `gents` object as a `table` at some memory address, and that's all it reveals.

To emphasise the point, we note that the Lua assignment operator for tables creates another variable that points to the *same* table:
```lua
gents = {'Tom', 'Dick', 'Harry'}
aka = gents
print(gents)
print(aka)
```
This outputs:
```sh
table: 0x600002e96940   # <1>
table: 0x600002e96940   # <2>
```
1. The variables `gents` and `aka` are really *pointers* to the same memory address.
2. The specific memory location will vary from run to run,

Of course, this output is not helpful and isn't what you'd naively expect!

You search for "How do I print a Lua array?" and find an answer like:
```lua
print(table.concat(gents, ", "))
```
And sure enough, out pops the string "Tom, Dick, Harry".

At this point, you may feel aggrieved!

Why didnâ€™t `print(gents)` return something like `"Tom", "Dick", "Harry"` in the first place?
What is that `table.concat(...)` call?
Everybody would prefer the second output over being told that Lua recognises `gents` as a `table` that resides at some address in memory.
There must be a better way!

### Key-Value Tables

Things get even more screwy when you try to print a more general Lua `table` that isn't an array:
```lua
mouse = {                   -- <1>
    first = 'Minnie',
    last = 'Mouse'
}
```
1. This is a Lua table with two name-value pairs.

Lua adheres to Mies Van der Rohe's "less is more" mantra.
It likes to keep things simple!

For example, we saw earlier that the Lua `number` type encompasses all classes of integers and all classes of floating-point numbers.
Other "system-level" computer languages distinguish between them, as every piece of computer hardware has different paths for the types at the chip level.
Programmers of those languages must understand and care about the differences between integers and floats.
That distinction makes sense if you want to squeeze the maximum performance from every CPU nanosecond.

Lua has different goals.
It is still efficient, but it is willing to spare a few compute cycles to limit type complexity for the programmer.
If you code in Lua, you can only use generic "numbers" and trust that Lua handles them efficiently, whatever the form of those numbers of interest may be.

The Lua `table` type is similar, encompassing simple arrays, like the `gents` example, and more general hash map tables with explicit keys and values, like the `mouse` example.
This combination seems odd if you have done any programming before encountering Lua.

The other "real" computer languages you learnt all distinguish between arrays and dictionaries.
In those languages, arrays are part of the core language.
A long, early manual chapter will expound on their use.
The description for the name-value dictionary-type container will be in the back of the book in the section dedicated to the language's "standard" library.
This division reflects that the hardware paths for the two container types are generally very different.
Arrays are considered more *fundamental* than dictionaries of name-value pairs.

Lua, in effect, says:

> Trust me, build that table however makes the most sense to you, and let me worry about efficiency.

Overall, this works remarkably well.
Lua internally splits tables into an array part that zips along the high-speed lane of the hardware highway and a dictionary part that is necessarily over on a lower-speed lane.
Again, the trade-off is between programming simplicity with a "trust me, I'll get you almost the same speed" clause and the maximum performance per nanosecond.

Given our lack of success at getting something useful out of `print` for an array, we aren't going to be surprised to see similar nonsense from `print(mouse)`:
```sh
table: 0x6000027d9b00
```
Lua tells you that `mouse` is a table residing at a specific memory location. <br>
True, but not very helpful!

If we try our earlier trick
```lua
print(table.concat(mouse, ", "))
```
Lua outputs a blank line.
Well, you just learnt something---apparently, `table.concat` only works on Lua array-like tables.

NOTE: A Lua array has *implicit* keys with successive integers starting at 1.
General Lua hash tables have explicit keys, such as the strings `first` and `last` in the `mouse` example.
The keys can be any Lua object, not just strings.

Of course, we can unpack our table and write:
```lua
print(name.first, name.last)
```
Then we get "Minnie Mouse".

Another quick search provides an answer for tables with an arbitrary number of key-value pairs:
```lua
for k, v in pairs(mouse) do
    print(k,v)
end
```
When I ran it the first time, this output:
```sh
last	Mouse
first	Minnie
```
The output is a valid representation of the data but not in a natural order.
Running the script a few more times may eventually give a better order:
```sh
first	Minnie
last	Mouse
```

CAUTION: Lua stores key-value tables in an *undefined* order, which can vary from run to run.
The `pairs` function iterates through the key-value pairs in storage order, so it's not constant.
Arrays, on the other hand, are always stored in the natural increasing index order.
